[
    {
        "id": "80bf706fc22f04f9",
        "type": "tab",
        "label": "Consolidated Data Gather",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7eb19f796e5a3624",
        "type": "link in",
        "z": "80bf706fc22f04f9",
        "name": "PLant List",
        "links": [
            "24adcf4d1d651c2c"
        ],
        "x": 225,
        "y": 400,
        "wires": [
            [
                "c183e34a349328c5",
                "a8e114f06545f4e8"
            ]
        ]
    },
    {
        "id": "c183e34a349328c5",
        "type": "debug",
        "z": "80bf706fc22f04f9",
        "name": "CD - Plant List",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 340,
        "wires": []
    },
    {
        "id": "a8e114f06545f4e8",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Run Through Plant List",
        "func": "function delay(milliseconds) {\n    return new Promise(resolve => {\n        setTimeout(resolve, milliseconds);\n    });\n}\n\n//sensor.sunsynk_plant_index\nvar origpayload = msg.payload;\nvar ErrorCk = global.get(\"SS.ErrorCk\"); //Error types to check against \nif (typeof msg.payload.data.infos[0] === \"undefined\") {\n    node.error(msg.payload);\n    node.status(\"No Plant Information Received\");\n    return null;\n}\nif (origpayload.msg == \"Success\") {\n} else {\n    node.status(origpayload.msg)\n    return null;\n}\nglobal.set(\"SS_Consolid.PlantTotal\", origpayload.data.total);\nfor (let i = 0; i < origpayload.data.total ; i++) {\n    global.set(\"SS_Consolid.Plant.\" + origpayload.data.infos[i].id, origpayload.data.infos[i]);\n    node.status(\"Processing :\" + origpayload.data.infos[i].id);\n    global.set(\"SS_Consolid.PlantProcessing\", origpayload.data.infos[i].id);\n    msg.payload={};\n    msg.payload = origpayload.data.infos[i].id;\n    node.send(msg);\n    await delay(10000);\n    node.status(\"Processed :\" + origpayload.data.infos[i].id);\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 400,
        "wires": [
            [
                "ec10bf5d8ef4ca46",
                "87e5a3c729295ff6",
                "08ea83914b8a4342"
            ]
        ]
    },
    {
        "id": "ec10bf5d8ef4ca46",
        "type": "debug",
        "z": "80bf706fc22f04f9",
        "name": "CD - Plant Index Info",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 340,
        "wires": []
    },
    {
        "id": "87e5a3c729295ff6",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Get Plant Flow Data",
        "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.hostname\") + \"/api/v1/plant/energy/\" + msg.payload + \"/flow\";\nmsg.payload=\"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 400,
        "wires": [
            [
                "3924f106061a13e2",
                "da74130ff8fa287b"
            ]
        ]
    },
    {
        "id": "3924f106061a13e2",
        "type": "http request",
        "z": "80bf706fc22f04f9",
        "name": "Get Flow Data",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 940,
        "y": 400,
        "wires": [
            [
                "69ba658d0f79e1c4",
                "4628bbf1be72d4a5"
            ]
        ]
    },
    {
        "id": "da74130ff8fa287b",
        "type": "debug",
        "z": "80bf706fc22f04f9",
        "name": "CD - Flow Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 340,
        "wires": []
    },
    {
        "id": "69ba658d0f79e1c4",
        "type": "debug",
        "z": "80bf706fc22f04f9",
        "name": "CD - Ret Flow Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 340,
        "wires": []
    },
    {
        "id": "4628bbf1be72d4a5",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Process Plant Flow Data",
        "func": "function delay(milliseconds) {\n    return new Promise(resolve => {\n        setTimeout(resolve, milliseconds);\n    });\n}\n\n//sensor.sunsynk_plant_index\nvar origpayload = msg.payload;\nvar ErrorCk = global.get(\"SS.ErrorCk\"); //Error types to check against \nif (typeof msg.payload.data.custCode === \"undefined\") {\n    node.error(msg.payload);\n    node.status(\"No Plant Flow Information Received\");\n    return null;\n}\nif (origpayload.msg == \"Success\") {\n} else {\n    node.status(origpayload.msg)\n    return null;\n}\nglobal.set(\"SS_Consolid.Plant.\" + global.get(\"SS_Consolid.PlantProcessing\") + \".flow\", origpayload.data);\nnode.status(\"Processing:\" + global.get(\"SS_Consolid.PlantProcessing\"));\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "08ea83914b8a4342",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Get Plant Inverter List",
        "func": "var ErrorCk = global.get(\"SS.ErrorCk\"); //Error types to check against \nvar items = global.get(global.get(\"HA\") + '.states[\\'sensor.sunsynk_return_items\\'].state');\nif (ErrorCk.includes(items)) { let e = \"No Items Set\"; node.error(e); node.status(e); return null };\nvar origpayload=msg.payload;\nmsg.payload={};\nmsg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.hostname\") + \"/api/v1/plant/\" +origpayload + \"/inverters?page=1&limit=\" + items + \"&status=-1&type=-2\";\nnode.status(\"Processing:\"+ origpayload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 520,
        "wires": [
            [
                "cfc5833426d39c80"
            ]
        ]
    },
    {
        "id": "f0c673e3b76f0732",
        "type": "debug",
        "z": "80bf706fc22f04f9",
        "name": "CD - Inv List",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 460,
        "wires": []
    },
    {
        "id": "cfc5833426d39c80",
        "type": "http request",
        "z": "80bf706fc22f04f9",
        "name": "Get Plant Invertor List",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 960,
        "y": 520,
        "wires": [
            [
                "f0c673e3b76f0732",
                "7e047388b555a974"
            ]
        ]
    },
    {
        "id": "7e047388b555a974",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Run Through Plant Inv List",
        "func": "function delay(milliseconds) {\n    return new Promise(resolve => {\n        setTimeout(resolve, milliseconds);\n    });\n}\n\n//sensor.sunsynk_plant_index\nvar origpayload = msg.payload;\nvar ErrorCk = global.get(\"SS.ErrorCk\"); //Error types to check against \nif (typeof msg.payload.data.infos[0] === \"undefined\") {\n    node.error(msg.payload);\n    node.status(\"No Inverter Received\");\n    return null;\n}\nif (origpayload.msg == \"Success\") {\n} else {\n    node.status(origpayload.msg)\n    return null;\n}\nnode.status(\"Plant ID:\" + global.get(\"SS_Consolid.PlantProcessing\") + \" -- \" + origpayload.data.total);\nglobal.set(\"SS_Consolid.Plant.\" + global.get(\"SS_Consolid.PlantProcessing\") + \".TotalInverters\", origpayload.data.total);\nfor (let i = 0; i < origpayload.data.total ; i++) {\n    node.status(\"Processing :\" + origpayload.data.infos[i].id);\n    global.set(\"SS_Consolid.Plant.\" + origpayload.data.infos[i].plant.id + \".Inverter.\" + origpayload.data.infos[i].sn , origpayload.data.infos[i]);\n    global.set(\"SS_Consolid.Plant.\" + origpayload.data.infos[i].plant.id + \".ProcessingInverter\", origpayload.data.infos[i].sn);\n    global.set(\"SS_Consolid.Config_Data.InverterPlant.\"+ origpayload.data.infos[i].sn , origpayload.data.infos[i].plant.id);\n    msg.payload={};\n    msg.payload = origpayload.data.infos[i].sn;\n    node.send(msg);\n    await delay(5000);\n    node.status(\"Processed :\" + origpayload.data.infos[i].sn);\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 520,
        "wires": [
            [
                "8d8f1145246cece5",
                "fd9d3bb588cf52b3",
                "357919a49fe68b74",
                "5248a4d1e28f17f8",
                "72ed2fbeee45285c",
                "f02d88283557d791",
                "0beb08319d512ac2"
            ]
        ]
    },
    {
        "id": "8d8f1145246cece5",
        "type": "debug",
        "z": "80bf706fc22f04f9",
        "name": "CD - Process Inv",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 460,
        "wires": []
    },
    {
        "id": "357919a49fe68b74",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Create Request for Getting battery Info",
        "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.hostname\") + \"/api/v1/inverter/battery/\" + msg.payload + \"/realtime?sn=\" + msg.payload + \"&lan\";\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 580,
        "wires": [
            [
                "48fac9d7d9d31115"
            ]
        ]
    },
    {
        "id": "0beb08319d512ac2",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Create Request for Getting Invertor Settings",
        "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.hostname\") + \"/api/v1/common/setting/\" + msg.payload + \"/read\";\nmsg.payload=\"\"\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 820,
        "wires": [
            [
                "88be6e31203b0a68"
            ]
        ]
    },
    {
        "id": "72ed2fbeee45285c",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Create Request for Getting Grid Info",
        "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.hostname\") + \"/api/v1/inverter/grid/\" + msg.payload + \"/realtime?sn=\" + msg.payload;\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 700,
        "wires": [
            [
                "fe13c91c6d38d5c3"
            ]
        ]
    },
    {
        "id": "f02d88283557d791",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Create Request for Getting Load Info",
        "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.hostname\") + \"/api/v1/inverter/load/\" + msg.payload + \"/realtime?sn=\" + msg.payload;\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 760,
        "wires": [
            [
                "df6bb5262d6197bd"
            ]
        ]
    },
    {
        "id": "5248a4d1e28f17f8",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Create Request for Getting Input",
        "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + msg.payload + \"/realtime/input\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 640,
        "wires": [
            [
                "903e64b9fdd68dd0"
            ]
        ]
    },
    {
        "id": "fd9d3bb588cf52b3",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Create Request for Getting Output",
        "func": "msg.headers = global.get(\"SS.Header.Bearer\");\nmsg.url = global.get(\"SS.url.hostname\") + \"/api/v1/inverter/\" + msg.payload + \"/realtime/output\";\nnode.status(msg.url);\nmsg.payload=\"\";\nlet currdate = new Date(); node.status(\"Action Sent - \" + currdate.toLocaleString());\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 520,
        "wires": [
            [
                "3520265ddab8fee3"
            ]
        ]
    },
    {
        "id": "48fac9d7d9d31115",
        "type": "http request",
        "z": "80bf706fc22f04f9",
        "name": "Get Invertor Battery Info",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1910,
        "y": 580,
        "wires": [
            [
                "ac412f2347cdbd20"
            ]
        ]
    },
    {
        "id": "88be6e31203b0a68",
        "type": "http request",
        "z": "80bf706fc22f04f9",
        "name": "Get Invertor Settings",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1900,
        "y": 820,
        "wires": [
            [
                "5fbc9605d31411df"
            ]
        ]
    },
    {
        "id": "fe13c91c6d38d5c3",
        "type": "http request",
        "z": "80bf706fc22f04f9",
        "name": "Get Invertor Grid Info",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1900,
        "y": 700,
        "wires": [
            [
                "8cf1615655da81ca"
            ]
        ]
    },
    {
        "id": "df6bb5262d6197bd",
        "type": "http request",
        "z": "80bf706fc22f04f9",
        "name": "Get Invertor Load Info",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1900,
        "y": 760,
        "wires": [
            [
                "1b85351ed66ca779"
            ]
        ]
    },
    {
        "id": "903e64b9fdd68dd0",
        "type": "http request",
        "z": "80bf706fc22f04f9",
        "name": "Get Invertor Input",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1890,
        "y": 640,
        "wires": [
            [
                "f4fd7c317badd547",
                "248b2dd64b704545"
            ]
        ]
    },
    {
        "id": "3520265ddab8fee3",
        "type": "http request",
        "z": "80bf706fc22f04f9",
        "name": "Get Invertor Output",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1890,
        "y": 520,
        "wires": [
            [
                "3f991f37d73d1362"
            ]
        ]
    },
    {
        "id": "248b2dd64b704545",
        "type": "debug",
        "z": "80bf706fc22f04f9",
        "name": "CD - Inv Rec Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 460,
        "wires": []
    },
    {
        "id": "3f991f37d73d1362",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Process Inv Output",
        "func": "function delay(milliseconds) {\n    return new Promise(resolve => {\n        setTimeout(resolve, milliseconds);\n    });\n}\n\nvar origpayload = msg.payload;\nvar ErrorCk = global.get(\"SS.ErrorCk\"); //Error types to check against \nif (typeof msg.payload.data === \"undefined\") {\n    node.error(msg.payload);\n    node.status(\"No Inverter Data Received\");\n    return null;\n}\nif (origpayload.msg == \"Success\") {\n} else {\n    node.status(origpayload.msg)\n    return null;\n}\nvar TPlant = global.get(\"SS_Consolid.PlantProcessing\");\nvar TInv = global.get(\"SS_Consolid.Plant.\"+TPlant+\".ProcessingInverter\");\nglobal.set(\"SS_Consolid.Plant.\" + TPlant + \".Inverter.\" + TInv + \".output\", origpayload.data);\nnode.status(\"Processing:\" + TPlant + \"-\" + TInv );\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "ac412f2347cdbd20",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Process Inv Output",
        "func": "function delay(milliseconds) {\n    return new Promise(resolve => {\n        setTimeout(resolve, milliseconds);\n    });\n}\n\nvar origpayload = msg.payload;\nvar ErrorCk = global.get(\"SS.ErrorCk\"); //Error types to check against \nif (typeof msg.payload.data === \"undefined\") {\n    node.error(msg.payload);\n    node.status(\"No Inverter Data Received\");\n    return null;\n}\nif (origpayload.msg == \"Success\") {\n} else {\n    node.status(origpayload.msg)\n    return null;\n}\nvar TPlant = global.get(\"SS_Consolid.PlantProcessing\");\nvar TInv = global.get(\"SS_Consolid.Plant.\"+TPlant+\".ProcessingInverter\");\nglobal.set(\"SS_Consolid.Plant.\" + TPlant + \".Inverter.\" + TInv + \".battery\", origpayload.data);\nnode.status(\"Processing:\" + TPlant + \"-\" + TInv );\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "f4fd7c317badd547",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Process Inv Output",
        "func": "function delay(milliseconds) {\n    return new Promise(resolve => {\n        setTimeout(resolve, milliseconds);\n    });\n}\n\nvar origpayload = msg.payload;\nvar ErrorCk = global.get(\"SS.ErrorCk\"); //Error types to check against \nif (typeof msg.payload.data === \"undefined\") {\n    node.error(msg.payload);\n    node.status(\"No Inverter Data Received\");\n    return null;\n}\nif (origpayload.msg == \"Success\") {\n} else {\n    node.status(origpayload.msg)\n    return null;\n}\nvar TPlant = global.get(\"SS_Consolid.PlantProcessing\");\nvar TInv = global.get(\"SS_Consolid.Plant.\"+TPlant+\".ProcessingInverter\");\nglobal.set(\"SS_Consolid.Plant.\" + TPlant + \".Inverter.\" + TInv + \".input\", origpayload.data);\nnode.status(\"Processing:\" + TPlant + \"-\" + TInv );\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "8cf1615655da81ca",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Process Inv Output",
        "func": "function delay(milliseconds) {\n    return new Promise(resolve => {\n        setTimeout(resolve, milliseconds);\n    });\n}\n\nvar origpayload = msg.payload;\nvar ErrorCk = global.get(\"SS.ErrorCk\"); //Error types to check against \nif (typeof msg.payload.data === \"undefined\") {\n    node.error(msg.payload);\n    node.status(\"No Inverter Data Received\");\n    return null;\n}\nif (origpayload.msg == \"Success\") {\n} else {\n    node.status(origpayload.msg)\n    return null;\n}\nvar TPlant = global.get(\"SS_Consolid.PlantProcessing\");\nvar TInv = global.get(\"SS_Consolid.Plant.\"+TPlant+\".ProcessingInverter\");\nglobal.set(\"SS_Consolid.Plant.\" + TPlant + \".Inverter.\" + TInv + \".grid\", origpayload.data);\nnode.status(\"Processing:\" + TPlant + \"-\" + TInv );\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "1b85351ed66ca779",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Process Inv Output",
        "func": "function delay(milliseconds) {\n    return new Promise(resolve => {\n        setTimeout(resolve, milliseconds);\n    });\n}\n\nvar origpayload = msg.payload;\nvar ErrorCk = global.get(\"SS.ErrorCk\"); //Error types to check against \nif (typeof msg.payload.data === \"undefined\") {\n    node.error(msg.payload);\n    node.status(\"No Inverter Data Received\");\n    return null;\n}\nif (origpayload.msg == \"Success\") {\n} else {\n    node.status(origpayload.msg)\n    return null;\n}\nvar TPlant = global.get(\"SS_Consolid.PlantProcessing\");\nvar TInv = global.get(\"SS_Consolid.Plant.\"+TPlant+\".ProcessingInverter\");\nglobal.set(\"SS_Consolid.Plant.\" + TPlant + \".Inverter.\" + TInv + \".load\", origpayload.data);\nnode.status(\"Processing:\" + TPlant + \"-\" + TInv );\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "5fbc9605d31411df",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Process Inv Output",
        "func": "function delay(milliseconds) {\n    return new Promise(resolve => {\n        setTimeout(resolve, milliseconds);\n    });\n}\n\nvar origpayload = msg.payload;\nvar ErrorCk = global.get(\"SS.ErrorCk\"); //Error types to check against \nif (typeof msg.payload.data === \"undefined\") {\n    node.error(msg.payload);\n    node.status(\"No Inverter Data Received\");\n    return null;\n}\nif (origpayload.msg == \"Success\") {\n} else {\n    node.status(origpayload.msg)\n    return null;\n}\nvar TPlant = global.get(\"SS_Consolid.PlantProcessing\");\nvar TInv = global.get(\"SS_Consolid.Plant.\"+TPlant+\".ProcessingInverter\");\nglobal.set(\"SS_Consolid.Plant.\" + TPlant + \".Inverter.\" + TInv + \".settings\", origpayload.data);\nnode.status(\"Processing:\" + TPlant + \"-\" + TInv );\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "7897ce7f18054dfe",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Export SS_Consolid.Pant To Entity",
        "func": "\nvar returnvalue = {};\n\nfunction scroll_all_items(s_payload, t_tkey) {\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n        if (value === null || value === \"\") {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = \"Missing\"; }\n        } else if (s_payload[key].length === 0) {\n            if (t_tkey === \"\") { returnvalue[key] = \"Missing\"; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        } else if (typeof s_payload[key] === 'object') {\n            if (Array.isArray(s_payload[key])) {\n                if (t_tkey === \"\") { process_array(s_payload[key], key); } else { process_array(s_payload[key], t_tkey + \"_\" + key); }\n            } else {\n                if (t_tkey === \"\") { scroll_all_items(s_payload[key], key); } else { scroll_all_items(s_payload[key], t_tkey + \"_\" + key); }\n            }\n        } else {\n            if (t_tkey === \"\") { returnvalue[key] = value; } else { returnvalue[t_tkey + \"_\" + key] = value; }\n        }\n    });\n    return;\n}\n\nfunction process_array(s_payload, t_tkey) {\n    if (t_tkey === \"infos_0_plantPermission\") { returnvalue[t_tkey] = \"Not Processed\" }\n    else {\n        for (let i = 0; i < s_payload.length; i++) {\n            scroll_all_items(s_payload[i], t_tkey + \"_\" + i);\n        }\n    }\n    return;\n}\n\n\nvar origpayload = global.get(\"SS_Consolid.Plant\");\nmsg.payload={};\nmsg.payload.attributes = {};\nscroll_all_items(origpayload, \"\");\nmsg.payload.attributes = returnvalue;\nmsg.payload.state = \"\";\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 140,
        "wires": [
            [
                "d389113a8b6e785b"
            ]
        ]
    },
    {
        "id": "d389113a8b6e785b",
        "type": "hass-post",
        "z": "80bf706fc22f04f9",
        "endpoint": "bc1c0f273da7bbae",
        "entityid": "sensor.sunsynk_consolidated",
        "name": "Update SunSynk Consolidated Data",
        "x": 830,
        "y": 140,
        "wires": []
    },
    {
        "id": "eb08e632c06df2b6",
        "type": "inject",
        "z": "80bf706fc22f04f9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "7897ce7f18054dfe"
            ]
        ]
    },
    {
        "id": "77939e04f70a60df",
        "type": "inject",
        "z": "80bf706fc22f04f9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 200,
        "wires": [
            [
                "4f89165e4a428622"
            ]
        ]
    },
    {
        "id": "4f89165e4a428622",
        "type": "function",
        "z": "80bf706fc22f04f9",
        "name": "Export SS_Consolid.Pant To Entity",
        "func": "function do_value__consolid(s_payload, t_tkey, d_tkey, tmultiple) {\n    var tvalue = 0;\n    var tplant = 0;\n    var tinverter = 0;\n\n    Object.entries(s_payload).forEach((entry) => {\n        const [key, value] = entry;\n           \n    });\n    return;\n}\n\n\nvar origpayload = global.get(\"SS_Consolid.Plant\");\n\nif (global.get(\"SunSynkDebug\") === 1) { node.error(msg); }\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 200,
        "wires": [
            [
                "8a354d545317f148"
            ]
        ]
    },
    {
        "id": "8a354d545317f148",
        "type": "debug",
        "z": "80bf706fc22f04f9",
        "name": "Consolidated Export Data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 200,
        "wires": []
    },
    {
        "id": "bc1c0f273da7bbae",
        "type": "hass-config",
        "host": "http://localhost",
        "port": "8123"
    }
]