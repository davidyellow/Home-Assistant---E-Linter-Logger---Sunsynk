[
    {
        "id": "683b7a0d3a577134",
        "type": "tab",
        "label": "Sunsynk Settings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a094266bc68e70ef",
        "type": "server-events",
        "z": "683b7a0d3a577134",
        "name": "Get All Events",
        "server": "53bc65975025ce60",
        "version": 3,
        "exposeAsEntityConfig": "",
        "eventType": "state_changed",
        "eventData": "",
        "waitForRunning": true,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "$outputData(\"eventData\").event_type",
                "valueType": "jsonata"
            }
        ],
        "x": 210,
        "y": 300,
        "wires": [
            [
                "17f7e6539db6b269",
                "bfae9326143af5cc"
            ]
        ]
    },
    {
        "id": "17f7e6539db6b269",
        "type": "debug",
        "z": "683b7a0d3a577134",
        "name": "Raw Events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 240,
        "wires": []
    },
    {
        "id": "bfae9326143af5cc",
        "type": "function",
        "z": "683b7a0d3a577134",
        "name": "Filter Events",
        "func": "//Entities to looks for changes\nvar ErrorCk = global.get(\"SS.ErrorCk\");\nvar EntityCheck = global.get(\"SS.mapping.arraylist\");\nif (ErrorCk.includes(EntityCheck)) {\n    node.status(\"Check Array Does Not Exist\");\n    return null;\n} else \n{\n    node.status(\"Check Array Exists - Processing Event\");\n};\nvar origmsg = msg.payload;\nif (EntityCheck.includes(msg.payload.entity_id)) \n { \n    msg.payload = {};\n    msg.payload.state =\"Checking\";\n    msg.payload.entityid = origmsg.event.entity_id;\n    msg.payload.value = origmsg.event.new_state.state;\n    msg.payload.exportid = global.get(\"SS.mapping.\" + origmsg.event.entity_id + \".exportid\");\n    msg.payload.inverterid = global.get(\"SS.mapping.\" + origmsg.event.entity_id + \".inverterid\");\n    if (ErrorCk.includes(msg.payload.exportid)) {\n        node.status(\"Array Missing(export):\" + msg.payload.entityid);\n        return null;\n    }\n    if (ErrorCk.includes(msg.payload.inverterid)) {\n        node.status(\"Array Missing(inverter):\" + msg.payload.entityid);\n        return null;\n    }\n    if (msg.payload.value === global.get(\"SS_Export_Data.\"+msg.payload.exportid))\n    { \n        msg.payload.state =\"Unchanged\"; \n        node.status(msg.payload.entityid + \":\"+ msg.payload.state);\n    } else \n    { \n        msg.payload.state =\"Changed\";\n        node.status(msg.payload.entityid + \":\"+ msg.payload.state);\n    }\n    return msg;\n };\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [
            [
                "15712de1289755a4"
            ]
        ]
    },
    {
        "id": "15712de1289755a4",
        "type": "debug",
        "z": "683b7a0d3a577134",
        "name": "Filtered Events",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 240,
        "wires": []
    },
    {
        "id": "69b994fd680b9d65",
        "type": "api-call-service",
        "z": "683b7a0d3a577134",
        "name": "Do Entity Updates Input Select",
        "server": "53bc65975025ce60",
        "version": 5,
        "debugenabled": false,
        "domain": "input_select",
        "service": "select_option",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 870,
        "y": 100,
        "wires": [
            [
                "030d8e5a389a48a8"
            ]
        ]
    },
    {
        "id": "de4960c4bc22ceeb",
        "type": "link in",
        "z": "683b7a0d3a577134",
        "name": "link in 1",
        "links": [
            "9c13453e02e7bae2"
        ],
        "x": 135,
        "y": 100,
        "wires": [
            [
                "d551a6b691b61dab"
            ]
        ]
    },
    {
        "id": "19a5107b5e9bd2c2",
        "type": "function",
        "z": "683b7a0d3a577134",
        "name": "Set Sunsynk Time Entities",
        "func": "function settimeentity(t_ent , t_value )\n{\n   msg = {}; msg.payload = {}; msg.payload.target = {}; msg.payload.data = {};\n   msg.payload.target.entity_id=t_ent;\n   msg.payload.data={ \"option\" : global.get(\"SS_Export_Data.\" + t_value )};\n   if (global.get(\"SS.mapping.\"+t_ent+\".type\") === \"input_select\") \n   { node.send([null , msg ]); } else \n   { node.send([msg , null ]); }\n}\n\nvar ErrorCk = global.get(\"SS.ErrorCk\");\nvar entityarray = global.get(\"SS.mapping.arraylist\");\nif (entityarray.length === 0) \n{ node.status(\"Empty Array\"); } else\n{\n  for (let i = 0; i < entityarray.length; i++) \n  {\n      if (global.get(\"SS.mapping.\"+entityarray[i]+\".activeset\") === true )\n      {\n         settimeentity(entityarray[i],global.get(\"SS.mapping.\"+entityarray[i]+\".exportid\"));\n         node.status(\"Processing:\"+ entityarray[i])\n      } else \n      {\n         node.status(\"Skipping:\"+ entityarray[i])\n      }\n  }\n}\n\nreturn null;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 100,
        "wires": [
            [
                "4ada5970d9c793e6"
            ],
            [
                "69b994fd680b9d65",
                "22e3702955856ae3"
            ]
        ]
    },
    {
        "id": "22e3702955856ae3",
        "type": "debug",
        "z": "683b7a0d3a577134",
        "name": "Update Entities",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 160,
        "wires": []
    },
    {
        "id": "030d8e5a389a48a8",
        "type": "debug",
        "z": "683b7a0d3a577134",
        "name": "Update Entities Errors",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 60,
        "wires": []
    },
    {
        "id": "d551a6b691b61dab",
        "type": "function",
        "z": "683b7a0d3a577134",
        "name": "Setup Global Vars",
        "func": "function setmapping( t_entityid,t_exportid,t_inverterid,t_activeset,t_type)\n{\n    global.set(\"SS.mapping.\" + t_entityid + \".exportid\", t_exportid);\n    global.set(\"SS.mapping.\" + t_entityid + \".inverterid\", t_inverterid);\n    global.set(\"SS.mapping.\" + t_entityid + \".activeset\", t_activeset);\n    global.set(\"SS.mapping.\" + t_entityid + \".type\", t_type);\n    global.set(\"SS.mapping.\" + t_exportid + \".entityid\", t_entityid);\n    global.set(\"SS.mapping.\" + t_exportid + \".inverterid\", t_inverterid);\n    global.set(\"SS.mapping.\" + t_exportid + \".activeset\", t_activeset);\n    global.set(\"SS.mapping.\" + t_exportid + \".type\", t_type);\n    var t_entityarray = global.get(\"SS.mapping.arraylist\");\n    if (t_entityarray.includes(t_entityid)) { } else\n    {\n         t_entityarray.push(t_entityid);\n    }\n    global.set(\"SS.mapping.arraylist\",t_entityarray);\n}\n\nvar ErrorCk = global.get(\"SS.ErrorCk\");\nvar entityarray = global.get(\"SS.mapping.arraylist\");\nif (entityarray.length === 0) \n{ \n    entityarray = [];\n    global.set(\"SS.mapping.arraylist\",entityarray)\n}\nnode.status(\"Number Array Entries:\"+ entityarray.length);\n\n//\n//\n// msg.payload = \"{sn:2106054422,\"safetyType\":\"2\",\"battMode\":\"-1\",\"solarSell\":\"0\",\"pvMaxLimit\":\"8000\",\"energyMode\":\"1\",\"peakAndVallery\":\"0\",\"sysWorkMode\":\"1\",\"sellTime1\":\"00:00\",\"sellTime2\":\"04:00\",\"sellTime3\":\"09:00\",\"sellTime4\":\"15:00\",\"sellTime5\":\"22:00\",\"sellTime6\":\"23:00\",\"sellTime1Pac\":\"8000\",\"sellTime2Pac\":\"8000\",\"sellTime3Pac\":\"8000\",\"sellTime4Pac\":\"8000\",\"sellTime5Pac\":\"8000\",\"sellTime6Pac\":\"8000\",\"cap1\":\"50\",\"cap2\":\"40\",\"cap3\":\"30\",\"cap4\":\"90\",\"cap5\":\"70\",\"cap6\":\"60\",\"sellTime1Volt\":\"49\",\"sellTime2Volt\":\"49\",\"sellTime3Volt\":\"49\",\"sellTime4Volt\":\"49\",\"sellTime5Volt\":\"49\",\"sellTime6Volt\":\"49\",\"zeroExportPower\":\"20\",\"solarMaxSellPower\":\"9000\",\"mondayOn\":true,\"tuesdayOn\":true,\"wednesdayOn\":true,\"thursdayOn\":true,\"fridayOn\":true,\"saturdayOn\":true,\"sundayOn\":true,\"time1on\":true,\"time2on\":true,\"time3on\":true,\"time4on\":true,\"time5on\":true,\"time6on\":true,\"genTime1on\":true,\"genTime2on\":true,\"genTime3on\":true,\"genTime4on\":true,\"genTime5on\":true,\"genTime6on\":true}\"\n////\n//          Entity ID                        SS_Export_Data ID      Sunsynk Update ID    Checking    Entity Type\nsetmapping(\"input_select.sunsynk_time1\",    \"inverter.selltime1\",   \"sellTime1\"         ,true       ,\"input_select\");\nsetmapping(\"input_select.sunsynk_time2\",    \"inverter.selltime2\",   \"sellTime2\"         ,true       ,\"input_select\");\nsetmapping(\"input_select.sunsynk_time3\",    \"inverter.selltime3\",   \"sellTime3\"         ,true       ,\"input_select\");\nsetmapping(\"input_select.sunsynk_time4\",    \"inverter.selltime4\",   \"sellTime4\"         ,true       ,\"input_select\");\nsetmapping(\"input_select.sunsynk_time5\",    \"inverter.selltime5\",   \"sellTime5\"         ,true       ,\"input_select\");\nsetmapping(\"input_select.sunsynk_time6\",    \"inverter.selltime6\",   \"sellTime6\"         ,true       ,\"input_select\");\nsetmapping(\"input_select.sunsynk_cap1\",     \"inverter.cap1\",        \"cap1\"              ,false      ,\"input_select\");\nsetmapping(\"input_select.sunsynk_time1on\",  \"inverter.time1on\",     \"time1on\"           ,false      ,\"input_select\");\nsetmapping(\"input_select.sunsynk_usetimer\", \"inverter.usetimer\",    \"peakAndVallery\"    ,false      ,\"input_select\");\n\nmsg={};\nmsg.state=\"Completed Setup\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 100,
        "wires": [
            [
                "19a5107b5e9bd2c2"
            ]
        ]
    },
    {
        "id": "4ada5970d9c793e6",
        "type": "debug",
        "z": "683b7a0d3a577134",
        "name": "Update Entities Error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 60,
        "wires": []
    },
    {
        "id": "53bc65975025ce60",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": true,
        "heartbeatInterval": "30",
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "id",
        "statusSeparator": ": ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "default",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": true
    }
]